{
  "name": "rfm69",
  "version": "0.0.4",
  "description": "Node module for interfacing with HopeRF RFM69 modules on a Raspberry Pi",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "test:e2e": "mocha ./test/e2e.js",
    "test:mock": "mocha ./test/mock.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dconstructing/rfm69.git"
  },
  "keywords": [
    "HopeRF",
    "RFM69",
    "RFM69W",
    "RFM69HW",
    "SPI"
  ],
  "author": {
    "name": "David Cox",
    "email": "losttime.shuffle@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/dconstructing/rosie/issues"
  },
  "homepage": "https://github.com/dconstructing/rosie",
  "dependencies": {
    "onoff": "^1.0.2",
    "pi-spi": "^0.8.7"
  },
  "devDependencies": {
    "mocha": "^2.2.4"
  },
  "readme": "# rfm69\n\nNode module for interfacing with HopeRF RFM69 modules on a Raspberry Pi.\n\nThis module has only been tested on a Raspberry Pi Model B running NodeJS 0.10.28. The module will likely work with other Pis and version of NodeJS, but they have not been officially tested.\n\nSupport for other systems (e.g. BeagleBoard) will be considered.\n\n## Installation\n\n```\nnpm install dconstructing/rfm69\n```\n\nIf you haven't already enabled SPI on your Raspberry Pi, you'll need to [enable the SPI kernel module](http://scruss.com/blog/2013/01/19/the-quite-rubbish-clock/#spi).\n\nYou'll also need to run your Node project with `sudo` in order to have permission to access the SPI interface. You may be able to modify permissions on your Pi to eliminate the need for `sudo`, but that has not been tested ([more info](https://github.com/natevw/pi-spi#example)). Install all your npm packages without `sudo` (or however you normally do it). Just use `sudo` to run the project.\n\n\n## Usage\n\n```js\nvar RFM69 = require('rfm69');\n\n// configure a module\nvar rfm69 = new RFM69();\n\nrfm69.onReady = function() {\n\t// module initialized\n\trfm69.listen();  // can receive\n\trfm69.send(\"hi\");\n};\nrfm69.onMessage = function(buffer) {\n\tconsole.log('received message', buffer);\n};\n\n// start up the module\nrfm69.initialize();\n\n// clean up on shutdown\nprocess.on('SIGINT', function() {\n\trfm69.close();\n\tprocess.exit();\n});\n```\n\n### RFM69([config])\n\nCreate a new instance of an rfm69 module (you can have two wired up).\n\nOptionally takes a configuration object with the following optional parameters:\n- `encryptionKey` string, used as key for encrypting messages. Omitting the encryption key disables encryption (default).\n- `highPower` boolean, whether or not module is a high power variant (e.g. rfm69HW) (default: `false`)\n- `nodeAddress`: int, unique identifier for this transceiver in the group (no default)\n- `broadcastAddress` int, signifies the group of RF transceivers this module belongs to (no default)\n- `spiBus` int, bus the RF module is wired to (default: `0` - only option on Pi Model B)\n- `spiDevice` int, which device the RF module is wired as on the SPI bus (default: `0`)\n- `interruptPin` int, which GPIO pin is wired to DIO0 on the RF module (default: `25`)\n- `resetPin` int, which GPIO pin is wired to RESET on the RF module (default: `24`)\n- `config` string, which message profile to use. Can be `default` or `lowPowerLab` (default: `default`)\n- `verbose` boolean, extended logging (default: `false`)\n\n```\nvar config = {\n\tencryptionKey: \"sampleEncryptKey\",\n\thighPower: true,\n\tnodeAddress: 1,\n\tbroadcastAddress: 155,\n\tverbose: false,\n\tconfig: 'lowPowerLab'\n};\n\nvar rfm69 = new RFM69(config)\n```\n\n#### initialize()\n\nTurn on the RF module and apply its configuration\n\n#### listen()\n\nTell the module to notify you of incoming messages.\n\n#### send(string, callback)\n\nSend a series of characters over the RF module. Callback function will be called when the message has been sent. Callback will be passed an error argument if an error is encountered during the send.\n\n#### reset()\n\nReapply the module's configuration according to the options provided at instantiation.\n\n#### close()\n\nDisable the RF module and allow the interrupt and reset GPIO pins to be used for other purposes.\n\n## Message Profiles\n\nMessage profiles allow the RF module to communicate with other RF modules that follow specific message format standards.\n\nThe `default` profile sends exactly the outgoing message you specify and provides the full message body when an incoming message is received.\n\nThe `lowPowerLab` profile formats outgoing messages in accordance with the [Arduino libraries provided by LowPowerLab](https://github.com/LowPowerLab/RFM69), allowing the Raspberry Pi to communicate with the [LowPowerLab Moteino](http://lowpowerlab.com/moteino/) and provide message filtering and message retries. *Not yet configured to ACK messages from a Moteino*.\n\nOther profiles can be developed an added with a pull-request.\n",
  "readmeFilename": "README.md",
  "_id": "rfm69@0.0.4",
  "_shasum": "699f336832e082c149da35c81188277153fde0c2",
  "_resolved": "git://github.com/dconstructing/rfm69#26471506c924c2798f970d3a739da27e3adab46d",
  "_from": "git://github.com/dconstructing/rfm69",
  "_fromGithub": true
}
